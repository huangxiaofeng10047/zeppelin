{
  "paragraphs": [
    {
      "text": "%flink\n\nSystem.err.println(\"hello\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 15:12:04.935",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "hello\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581489527186_-885007191",
      "id": "paragraph_1581489527186_-885007191",
      "dateCreated": "2020-02-12 14:38:47.190",
      "dateStarted": "2020-02-12 15:12:04.940",
      "dateFinished": "2020-02-12 15:12:22.968",
      "status": "FINISHED"
    },
    {
      "text": "%flink\n\nimport com.alibaba.alink.operator.stream.source._\nimport com.alibaba.alink.operator.stream._\n\nval src \u003d new MemSourceStreamOp(Array(\"1\",\"2\", \"3\").asInstanceOf[Array[Object]], \"col_1\");\nsrc.print();\nStreamOperator.execute();\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 15:12:40.688",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import com.alibaba.alink.operator.stream.source._\nimport com.alibaba.alink.operator.stream._\n\u001b[1m\u001b[34msrc\u001b[0m: \u001b[1m\u001b[32mcom.alibaba.alink.operator.stream.source.MemSourceStreamOp\u001b[0m \u003d UnnamedTable$0\n\u001b[33mwarning: \u001b[0mthere was one feature warning; re-run with -feature for details\ncol_1\r\n-----\n\u001b[1m\u001b[34mres2\u001b[0m: \u001b[1m\u001b[32mcom.alibaba.alink.operator.stream.StreamOperator[?0] forSome { type ?0 \u003c: com.alibaba.alink.operator.stream.StreamOperator[?0] }\u001b[0m \u003d UnnamedTable$1\n1\n2\n3\n\u001b[1m\u001b[34mres3\u001b[0m: \u001b[1m\u001b[32morg.apache.flink.api.common.JobExecutionResult\u001b[0m \u003d\nProgram execution finished\nJob with JobID 1e92694672b3232174057281f4895873 has finished.\nJob Runtime: 9698 ms\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581490790419_-679588284",
      "id": "paragraph_1581490790419_-679588284",
      "dateCreated": "2020-02-12 14:59:50.420",
      "dateStarted": "2020-02-12 15:12:40.693",
      "dateFinished": "2020-02-12 15:12:55.813",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\nimport pyflink\nfrom pyflink.dataset import ExecutionEnvironment\nfrom pyflink.datastream import StreamExecutionEnvironment\nfrom pyalink.alink.env import useCustomEnv\nmlenv \u003d useCustomEnv(gateway, b_env, bt_env_2, s_env, st_env_2)\n\nfrom pyalink.alink import *\n\n# t \u003d bt_env_2.from_elements([(1, 2), (2, 5), (3, 1)], [\u0027a\u0027, \u0027b\u0027])\n# source \u003d TableSourceBatchOp(t)\n# print(source)\n# source.print()\n\nt \u003d st_env_2.from_elements([(1, 2), (2, 5), (3, 1)], [\u0027a\u0027, \u0027b\u0027])\nsource \u003d TableSourceStreamOp(t)\nsource.print()\nStreamOperator.execute()\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 17:08:10.306",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nUse one of the following command to start using pyalink:\n使用以下一条命令来开始使用 pyalink：\n - useLocalEnv(parallelism, flinkHome\u003dNone, config\u003dNone)\n - useRemoteEnv(host, port, parallelism, flinkHome\u003dNone, localIp\u003d\"localhost\", config\u003dNone)\nCall resetEnv() to reset environment and switch to another.\n使用 resetEnv() 来重置运行环境，并切换到另一个。\n\n\u0027DataStream f12ef18a092645a28a15e5ce713b5298: (waiting data to streaming in...)\u0027\n"
          },
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003ea\u003c/th\u003e\n      \u003cth\u003eb\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581387855177_909254631",
      "id": "paragraph_1581387855177_909254631",
      "dateCreated": "2020-02-11 10:24:15.177",
      "dateStarted": "2020-02-12 17:08:10.312",
      "dateFinished": "2020-02-12 17:08:29.906",
      "status": "FINISHED"
    },
    {
      "text": "%python.ipython\n\nfrom datetime import datetime\n\nfrom IPython import display\n\nimport pandas as pd\n\ndata \u003d {\u0027a\u0027: [1,2,3],\n        \u0027b\u0027: [2,5,1]\n        }\n\ndf \u003d pd.DataFrame(data, columns \u003d [\u0027a\u0027, \u0027b\u0027])\n\ntitle_display_handle \u003d display.display(\"DataStream (waiting data to streaming in...)\", display_id\u003dTrue)\ndisplay_handle \u003d display.display(df, display_id\u003dTrue)\n\n\nimport time\ntime.sleep(2)\ndata \u003d {\u0027a\u0027: [1,2,3,4],\n        \u0027b\u0027: [2,5,1,5],\n        }\n\ndf \u003d pd.DataFrame(data, columns \u003d [\u0027a\u0027, \u0027b\u0027])\nz.z.getInterpreterContext().out().clear()\n\ndisplay_handle \u003d display.display(df, display_id\u003dTrue)\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 17:20:37.670",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003ea\u003c/th\u003e\n      \u003cth\u003eb\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581493920164_774757447",
      "id": "paragraph_1581493920164_774757447",
      "dateCreated": "2020-02-12 15:52:00.164",
      "dateStarted": "2020-02-12 17:20:37.675",
      "dateFinished": "2020-02-12 17:20:39.773",
      "status": "FINISHED"
    },
    {
      "text": "%python.ipython\n\nprint(\"hello world\")\nprint(\"%html \u003ch1\u003ehello world\u003c/h1\u003e\")\nprint(\"%text abc\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 17:18:19.531",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "hello world\n"
          },
          {
            "type": "HTML",
            "data": "\u003ch1\u003ehello world\u003c/h1\u003e\n"
          },
          {
            "type": "TEXT",
            "data": "abc\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581496811397_-127713021",
      "id": "paragraph_1581496811397_-127713021",
      "dateCreated": "2020-02-12 16:40:11.397",
      "dateStarted": "2020-02-12 17:18:19.538",
      "dateFinished": "2020-02-12 17:18:19.634",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\nimport pandas as pd\n\ndata \u003d {\u0027a\u0027: [1,2,3],\n        \u0027b\u0027: [2,5,1]\n        }\n\ndf \u003d pd.DataFrame(data, columns \u003d [\u0027a\u0027, \u0027b\u0027])\n\nprint(df)",
      "user": "anonymous",
      "dateUpdated": "2020-02-12 15:45:52.264",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "   a  b\n0  1  2\n1  2  5\n2  3  1\n"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581493442141_491474083",
      "id": "paragraph_1581493442141_491474083",
      "dateCreated": "2020-02-12 15:44:02.141",
      "dateStarted": "2020-02-12 15:45:52.270",
      "dateFinished": "2020-02-12 15:45:52.392",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# schema of train data\nschemaStr \u003d \"id string, click string, dt string, C1 string, banner_pos int, site_id string, \\\n            site_domain string, site_category string, app_id string, app_domain string, \\\n            app_category string, device_id string, device_ip string, device_model string, \\\n            device_type string, device_conn_type string, C14 int, C15 int, C16 int, C17 int, \\\n            C18 int, C19 int, C20 int, C21 int\"\n\n# prepare batch train data\nbatchTrainDataFn \u003d \"http://alink-release.oss-cn-beijing.aliyuncs.com/data-files/avazu-small.csv\"\ntrainBatchData \u003d CsvSourceBatchOp().setFilePath(batchTrainDataFn) \\\n        .setSchemaStr(schemaStr) \\\n        .setIgnoreFirstLine(True);\n# feature fit\nlabelColName \u003d \"click\"\nvecColName \u003d \"vec\"\nnumHashFeatures \u003d 30000\nselectedColNames \u003d[\"C1\",\"banner_pos\",\"site_category\",\"app_domain\",\n                  \"app_category\",\"device_type\",\"device_conn_type\", \n                  \"C14\",\"C15\",\"C16\",\"C17\",\"C18\",\"C19\",\"C20\",\"C21\",\n                   \"site_id\",\"site_domain\",\"device_id\",\"device_model\"]\n\ncategoryColNames \u003d [\"C1\",\"banner_pos\",\"site_category\",\"app_domain\", \n                    \"app_category\",\"device_type\",\"device_conn_type\",\n                    \"site_id\",\"site_domain\",\"device_id\",\"device_model\"]\n\nnumericalColNames \u003d [\"C14\",\"C15\",\"C16\",\"C17\",\"C18\",\"C19\",\"C20\",\"C21\"]\n\n# prepare stream train data\nwholeDataFile \u003d \"http://alink-release.oss-cn-beijing.aliyuncs.com/data-files/avazu-ctr-train-8M.csv\"\ndata \u003d CsvSourceStreamOp() \\\n        .setFilePath(wholeDataFile) \\\n        .setSchemaStr(schemaStr) \\\n        .setIgnoreFirstLine(True);\n\n# split stream to train and eval data\nspliter \u003d SplitStreamOp().setFraction(0.5).linkFrom(data)\ntrain_stream_data \u003d spliter\ntest_stream_data \u003d spliter.getSideOutput(0)",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 13:59:31.131",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515768_-2094568667",
      "id": "paragraph_1579182372109_1400950255",
      "dateCreated": "2020-02-10 17:21:55.768",
      "dateStarted": "2020-02-11 13:59:31.141",
      "dateFinished": "2020-02-11 13:59:31.736",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# setup feature enginerring pipeline\nfeature_pipeline \u003d Pipeline() \\\n        .add(StandardScaler() \\\n                .setSelectedCols(numericalColNames)) \\\n        .add(FeatureHasher() \\\n                .setSelectedCols(selectedColNames) \\\n                .setCategoricalCols(categoryColNames) \\\n                .setOutputCol(vecColName) \\\n                .setNumFeatures(numHashFeatures))\n\n# fit and save feature pipeline model\nFEATURE_PIPELINE_MODEL_FILE \u003d os.path.join(os.getcwd(), \"feature_pipe_model.csv\")\nfeature_pipeline.fit(trainBatchData).save(FEATURE_PIPELINE_MODEL_FILE);\n\nBatchOperator.execute();\n\n# load pipeline model\nfeature_pipelineModel \u003d PipelineModel.load(FEATURE_PIPELINE_MODEL_FILE);",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 13:59:31.751",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515775_972647840",
      "id": "paragraph_1579182388400_966265456",
      "dateCreated": "2020-02-10 17:21:55.775",
      "dateStarted": "2020-02-11 13:59:31.758",
      "dateFinished": "2020-02-11 14:02:45.990",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# train initial batch model\nlr \u003d LogisticRegressionTrainBatchOp()\ninitModel \u003d lr.setVectorCol(vecColName) \\\n        .setLabelCol(labelColName) \\\n        .setWithIntercept(True) \\\n        .setMaxIter(10) \\\n        .linkFrom(feature_pipelineModel.transform(trainBatchData))",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 14:02:46.023",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515775_-1612666377",
      "id": "paragraph_1579182397623_-1047605051",
      "dateCreated": "2020-02-10 17:21:55.775",
      "dateStarted": "2020-02-11 14:02:46.061",
      "dateFinished": "2020-02-11 14:02:47.782",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# ftrl train \nmodel \u003d FtrlTrainStreamOp(initModel) \\\n        .setVectorCol(vecColName) \\\n        .setLabelCol(labelColName) \\\n        .setWithIntercept(True) \\\n        .setAlpha(0.1) \\\n        .setBeta(0.1) \\\n        .setL1(0.01) \\\n        .setL2(0.01) \\\n        .setTimeInterval(10) \\\n        .setVectorSize(numHashFeatures) \\\n        .linkFrom(feature_pipelineModel.transform(train_stream_data))",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 14:02:47.813",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515776_-1075265057",
      "id": "paragraph_1579182427317_1284740453",
      "dateCreated": "2020-02-10 17:21:55.776",
      "dateStarted": "2020-02-11 14:02:47.826",
      "dateFinished": "2020-02-11 14:04:48.464",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# ftrl predict\npredResult \u003d FtrlPredictStreamOp(initModel) \\\n        .setVectorCol(vecColName) \\\n        .setPredictionCol(\"pred\") \\\n        .setReservedCols([labelColName]) \\\n        .setPredictionDetailCol(\"details\") \\\n        .linkFrom(model, feature_pipelineModel.transform(test_stream_data))\n\npredResult.print(key\u003d\"predResult\", refreshInterval \u003d 30, maxLimit\u003d20)",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 14:04:48.494",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u0027DataStream predResult: (waiting data to streaming in...)\u0027\n"
          },
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eclick\u003c/th\u003e\n      \u003cth\u003epred\u003c/th\u003e\n      \u003cth\u003edetails\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515776_11269729",
      "id": "paragraph_1579182429382_-1730470368",
      "dateCreated": "2020-02-10 17:21:55.776",
      "dateStarted": "2020-02-11 14:04:48.508",
      "dateFinished": "2020-02-11 14:06:36.750",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ipyflink\n\n# ftrl eval\nEvalBinaryClassStreamOp() \\\n        .setLabelCol(labelColName) \\\n        .setPredictionCol(\"pred\") \\\n        .setPredictionDetailCol(\"details\") \\\n        .setTimeInterval(10) \\\n        .linkFrom(predResult) \\\n        .link(JsonValueStreamOp() \\\n                .setSelectedCol(\"Data\") \\\n                .setReservedCols([\"Statistics\"]) \\\n                .setOutputCols([\"Accuracy\", \"AUC\", \"ConfusionMatrix\"]) \\\n                .setJsonPath([\"$.Accuracy\", \"$.AUC\", \"$.ConfusionMatrix\"])) \\\n                .print(key\u003d\"evaluation\", refreshInterval \u003d 30, maxLimit\u003d20)\nStreamOperator.execute()",
      "user": "anonymous",
      "dateUpdated": "2020-02-11 14:06:36.767",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "runOnSelectionChange": true,
        "title": false,
        "checkEmpty": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "java.lang.InterruptedException: sleep interrupted"
          }
        ]
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515779_1671709478",
      "id": "paragraph_1579182455555_-1242667927",
      "dateCreated": "2020-02-10 17:21:55.779",
      "dateStarted": "2020-02-11 14:06:36.805",
      "dateFinished": "2020-02-11 13:37:47.109",
      "status": "ABORT"
    },
    {
      "text": "%flink.ipyflink\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-10 17:21:55.789",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1581326515789_873022241",
      "id": "paragraph_1579182486966_-1953989791",
      "dateCreated": "2020-02-10 17:21:55.789",
      "status": "READY"
    }
  ],
  "name": "Ftrl demo",
  "id": "2F14FZAQD",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "permissions": {},
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": true
  },
  "info": {},
  "path": "/Ftrl demo"
}